from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import database as db
import keyboards as kb
import achievements
from datetime import datetime, timedelta
import pytz  # <-- –î–æ–¥–∞–Ω–æ
from utils.safe_sender import send_message_safely
from config import GROUP_ID, GROUP_INVITE_LINK
from handlers.nutrition_handler import send_daily_summary
import re

# –ö–∏—ó–≤—Å—å–∫–∞ —á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞
KYIV_TZ = pytz.timezone("Europe/Kiev")

def get_current_kyiv_time():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑–∞ –∫–∏—ó–≤—Å—å–∫–æ—é —á–∞—Å–æ–≤–æ—é –∑–æ–Ω–æ—é."""
    return datetime.now(KYIV_TZ)

DAY_MAP = {
    "Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
    "Tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫",
    "Wednesday": "–°–µ—Ä–µ–¥–∞",
    "Thursday": "–ß–µ—Ç–≤–µ—Ä",
    "Friday": "–ü'—è—Ç–Ω–∏—Ü—è",
    "Saturday": "–°—É–±–æ—Ç–∞",
    "Sunday": "–ù–µ–¥—ñ–ª—è",
}

async def send_today_workout_for_user(user_id: int, bot: Bot, is_reminder: bool = False):
    try:
        today_english = get_current_kyiv_time().strftime('%A')
        today_ukrainian = DAY_MAP.get(today_english)

        if not today_ukrainian:
            print(f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –¥–µ–Ω—å –¥–ª—è {today_english}")
            if not is_reminder:
                await send_message_safely(bot, user_id, "–í–∏–Ω–∏–∫–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞ –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        plan = await db.get_user_plan(user_id)
        if not plan:
            if not is_reminder:
                await send_message_safely(bot, user_id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å. –°—Ç–≤–æ—Ä—ñ—Ç—å –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /create_plan")
            return

        pattern = re.compile(rf"\*\*{today_ukrainian}.*?\*\*([\s\S]*?)(?=\n\*\*|\Z)", re.IGNORECASE)
        match = pattern.search(plan)

        if match:
            workout_for_today = match.group(0).strip()
            if "–≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫" in workout_for_today.lower():
                text = f"–°—å–æ–≥–æ–¥–Ω—ñ —É –≤–∞—Å –∑–∞ –ø–ª–∞–Ω–æ–º **–¥–µ–Ω—å –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É** üßò. –ù–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å!"
                await send_message_safely(bot, user_id, f"–ü—Ä–∏–≤—ñ—Ç! {text.lower()}" if not is_reminder else text)
            else:
                text = (
                    f"–ü—Ä–∏–≤—ñ—Ç! –ù–∞–≥–∞–¥—É—é –ø—Ä–æ –≤–∞—à–µ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –í–∞—à —à–ª—è—Ö –¥–æ –º–µ—Ç–∏ –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è! üí™\n\n"
                    if is_reminder else
                    f"–û—Å—å –≤–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –í–ø–µ—Ä–µ–¥ –¥–æ –º–µ—Ç–∏! üí™\n\n"
                ) + workout_for_today
                await send_message_safely(bot, user_id, text, reply_markup=kb.confirm_workout_kb)
        else:
            if not is_reminder:
                await send_message_safely(bot, user_id, "–°—Ö–æ–∂–µ, —É –≤–∞—à–æ–º—É –ø–ª–∞–Ω—ñ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
        if not is_reminder:
            await send_message_safely(bot, user_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")

async def send_daily_reminder(bot: Bot):
    users = await db.get_all_active_users()
    for user_id, *_ in users:
        await send_today_workout_for_user(user_id, bot, is_reminder=True)

# –£—Å—ñ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏, –æ–∫—Ä—ñ–º —Ç–∏—Ö, –¥–µ —î datetime.now()

async def send_meal_reminders(bot: Bot):
    current_time = get_current_kyiv_time().strftime("%H:%M")
    user_reminders = await db.get_all_user_reminders()

    for user_id, breakfast, lunch, dinner in user_reminders:
        reminder_to_send = None
        if breakfast == current_time:
            reminder_to_send = ("—Å–Ω—ñ–¥–∞–Ω–∫—É üç≥", "breakfast")
        elif lunch == current_time:
            reminder_to_send = ("–æ–±—ñ–¥—É üç≤", "lunch")
        elif dinner == current_time:
            reminder_to_send = ("–≤–µ—á–µ—Ä—ñ ü•ó", "dinner")

        if reminder_to_send:
            text = f"–ß–∞—Å –¥–ª—è {reminder_to_send[0]}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–∏–π–æ–º —ó–∂—ñ."
            kb_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ó–∞–ø–∏—Å–∞—Ç–∏ —ó–∂—É", callback_data=f"log_meal:{reminder_to_send[1]}")]
            ])
            try:
                await send_message_safely(bot, user_id, text, reply_markup=kb_markup)
            except Exception as e:
                print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —ó–∂—É {user_id}: {e}")

async def send_monthly_report(bot: Bot):
    users = await db.get_all_active_users()
    for user_data in users:
        try:
            user_id = user_data[0]
            reg_date_str = user_data[1] if len(user_data) > 1 else None
            if not reg_date_str:
                continue
            reg_date = datetime.fromisoformat(reg_date_str)
            if get_current_kyiv_time() - reg_date > timedelta(days=30):
                await achievements.check_and_grant_achievement(user_id, 'marathoner', bot)
            total_workouts = await db.count_total_workouts(user_id)
            last_30_days = await db.count_workouts_last_n_days(user_id, 30)
            report_text = (
                f"üìÖ **–í–∞—à –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å!**\n\n–í–∏ —á—É–¥–æ–≤–æ –ø–æ–ø—Ä–∞—Ü—é–≤–∞–ª–∏! –û—Å—å –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üî∏ –¢—Ä–µ–Ω—É–≤–∞–Ω—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å: **{last_30_days}**\n"
                f"üî∏ –í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∑ –±–æ—Ç–æ–º: **{total_workouts}**\n\n"
                f"–ù–æ–≤–∏–π –º—ñ—Å—è—Ü—å ‚Äî –Ω–æ–≤—ñ –≤–µ—Ä—à–∏–Ω–∏! –ù–µ –∑—É–ø–∏–Ω—è–π—Ç–µ—Å—å!"
            )
            await send_message_safely(bot, user_id, report_text)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")

def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone=KYIV_TZ)

    scheduler.add_job(send_daily_reminder, 'cron', hour=23, minute=40, args=(bot,))
    scheduler.add_job(ask_for_weekly_feedback, 'cron', day_of_week='sun', hour=19, minute=0, args=(bot,))
    scheduler.add_job(send_monthly_report, 'cron', day=1, hour=10, minute=0, args=(bot,))
    scheduler.add_job(post_weekly_leaderboard, 'cron', day_of_week='sun', hour=20, minute=0, args=(bot,))
    scheduler.add_job(remind_to_join_group, 'cron', day_of_week='tue,fri', hour=12, minute=0, args=(bot,))
    scheduler.add_job(send_evening_summary, 'cron', hour=21, minute=30, args=(bot,))
    scheduler.add_job(send_meal_reminders, 'cron', minute='*', args=(bot,))
    scheduler.add_job(send_bedtime_reminder, 'cron', hour=22, minute=0, args=(bot,))

    if not scheduler.running:
        scheduler.start()

    return scheduler
