from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database as db
import keyboards as kb
from utils.safe_sender import answer_message_safely, send_message_safely
import gemini
import json

router = Router()

class NutritionStates(StatesGroup):
    waiting_for_meal_description = State()
    waiting_for_meal_confirmation = State()

# –û–±—Ä–æ–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
@router.message(F.chat.type == "private", F.text == "ü•ë –î–æ–¥–∞—Ç–∏ —ó–∂—É")
@router.message(Command("add_meal"), F.chat.type == "private")
@router.callback_query(F.data.startswith("log_meal:"))
async def start_meal_logging(event: Message | CallbackQuery, state: FSMContext):
    message = event if isinstance(event, Message) else event.message
    await answer_message_safely(message, "–ß—É–¥–æ–≤–æ! –©–æ —Å–∞–º–µ –≤–∏ –∑'—ó–ª–∏? –û–ø–∏—à—ñ—Ç—å —Å—Ç—Ä–∞–≤—É —è–∫–æ–º–æ–≥–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ.")
    await state.set_state(NutritionStates.waiting_for_meal_description)
    if isinstance(event, CallbackQuery):
        await event.answer()

@router.message(NutritionStates.waiting_for_meal_description, F.chat.type == "private")
async def process_meal_description(message: Message, state: FSMContext, bot: Bot):
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    response_json_str = await gemini.analyze_meal(message.text)
    
    try:
        meal_data = json.loads(response_json_str)
        await state.update_data(meal_data=meal_data)
        
        confirmation_text = (
            f"–Ø —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –≤–∞—à—É —Å—Ç—Ä–∞–≤—É —è–∫ **'{meal_data['meal_name']}'**.\n\n"
            f"–û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: **{meal_data['calories']} –∫–∫–∞–ª**\n"
            f"(–ë: {meal_data.get('proteins', 0)}–≥, –ñ: {meal_data.get('fats', 0)}–≥, –í: {meal_data.get('carbs', 0)}–≥)\n\n"
            f"–ó–∞–ø–∏—Å–∞—Ç–∏ —Ü–µ–π –ø—Ä–∏–π–æ–º —ó–∂—ñ?"
        )
        await answer_message_safely(message, confirmation_text, reply_markup=kb.get_meal_confirmation_kb())
        await state.set_state(NutritionStates.waiting_for_meal_confirmation)
    except (json.JSONDecodeError, KeyError):
        await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–∏ —ó—ó –ø—Ä–æ—Å—Ç—ñ—à–µ.")
        await state.clear()

@router.callback_query(NutritionStates.waiting_for_meal_confirmation, F.data == "confirm_meal")
async def confirm_meal_logging(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    meal_data = data.get('meal_data')
    
    await db.log_meal(
        user_id=callback.from_user.id,
        description=meal_data['meal_name'],
        calories=meal_data['calories'],
        proteins=meal_data.get('proteins', 0),
        fats=meal_data.get('fats', 0),
        carbs=meal_data.get('carbs', 0)
    )
    
    await callback.message.edit_text("‚úÖ –ü—Ä–∏–π–æ–º —ó–∂—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ!")
    await state.clear()
    await callback.answer()

@router.callback_query(NutritionStates.waiting_for_meal_confirmation, F.data == "cancel_meal")
async def cancel_meal_logging(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await state.clear()
    await callback.answer()

# –î–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç
@router.message(Command("summary"), F.chat.type == "private")
async def get_summary_command(message: Message, bot: Bot):
    await send_daily_summary(message.from_user.id, bot)

async def send_daily_summary(user_id: int, bot: Bot):
    summary_data = await db.get_daily_food_summary(user_id)
    if not summary_data:
        # –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω—ñ—á–æ–≥–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ—á–æ–≥–æ –Ω–µ —ó–≤
        return

    report_lines = ["**–í–∞—à —Ä–∞—Ü—ñ–æ–Ω –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:**\n"]
    total_calories = 0
    
    for meal in summary_data:
        report_lines.append(f"- {meal[0]}: {meal[1]} –∫–∫–∞–ª")
        total_calories += meal[1]
    
    # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∞–ª–µ–Ω–∏—Ö –∫–∞–ª–æ—Ä—ñ–π —Ç–∞ —Ü—ñ–ª—ñ
    # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫–∏
    burned_calories = 300 # –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –ø–∞—Ä—Å–∏—Ç–∏ –∑ –ø–ª–∞–Ω—É
    target_calories = 2200 # –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –±—Ä–∞—Ç–∏ –∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    activity_level = await db.get_daily_activity(user_id)
    
    report_lines.append(f"\n---")
    report_lines.append(f"**üî• –í—Å—å–æ–≥–æ —Å–ø–æ–∂–∏—Ç–æ: {total_calories} –∫–∫–∞–ª**")
    report_lines.append(f"*–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –Ω–æ—Ä–º–∞: ~{target_calories} –∫–∫–∞–ª*")

    await send_message_safely(bot, user_id, "\n".join(report_lines))

    # –ó–∞–ø–∏—Ç –¥–æ Gemini –¥–ª—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
    analysis_data = {
        "goal": "–ù–∞–±—Ä–∞—Ç–∏ –º–∞—Å—É", # –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—Ä–∞—Ç–∏ –∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        "consumed_calories": total_calories,
        "target_calories": target_calories,
        "burned_calories": burned_calories,
        "activity_level": activity_level
    }
    analysis_text = await gemini.get_daily_analysis(analysis_data)
    await send_message_safely(bot, user_id, analysis_text)
