from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, Video
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
import database as db
import keyboards as kb
from utils.safe_sender import answer_message_safely, send_message_safely
from config import GROUP_ID
import achievements

router = Router()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è FSM
class CommunityStates(StatesGroup):
    creating_challenge_title = State()
    creating_challenge_desc = State()
    creating_challenge_duration = State()
    waiting_for_video_proof = State()
    creating_duel_opponent = State()
    creating_duel_desc = State()

# --- –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ —á–µ–ª–µ–Ω–¥–∂—ñ–≤ ---

@router.message(Command("challenges"), F.chat.type == "private")
async def list_challenges(message: Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö —á–µ–ª–µ–Ω–¥–∂—ñ–≤."""
    challenges = await db.get_public_challenges()
    if not challenges:
        await message.answer(
            "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—É–±–ª—ñ—á–Ω–∏—Ö —á–µ–ª–µ–Ω–¥–∂—ñ–≤. "
            "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /create_challenge!"
        )
        return
    
    await message.answer(
        "–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–µ–ª–µ–Ω–¥–∂—ñ–≤. –û–±–µ—Ä—ñ—Ç—å, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å:",
        reply_markup=kb.get_challenges_kb(challenges)
    )

@router.callback_query(F.data.startswith("view_challenge:"))
async def view_challenge(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–∏–π —á–µ–ª–µ–Ω–¥–∂."""
    challenge_id = int(callback.data.split(":")[1])
    challenge_details = await db.get_public_challenge_details(challenge_id)
    
    if not challenge_details:
        await callback.answer("–¶–µ–π —á–µ–ª–µ–Ω–¥–∂ –±—ñ–ª—å—à–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–π.", show_alert=True)
        await callback.message.edit_text("–¶–µ–π —á–µ–ª–µ–Ω–¥–∂ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –∑–∞–≤–µ—Ä—à–∏–≤—Å—è.", reply_markup=None)
        return

    # –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏
    _, author_id, title, description, duration, _, _ = challenge_details
    text = (
        f"<b>{title}</b>\n\n"
        f"<i>{description}</i>\n\n"
        f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} –¥–Ω—ñ–≤.\n"
        f"ID —á–µ–ª–µ–Ω–¥–∂—É –¥–ª—è –∞–¥–º—ñ–Ω–∞: <code>{challenge_id}</code>"
    )
    
    is_participant = await db.get_user_challenge_progress(callback.from_user.id, challenge_id) is not None
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_challenge_action_kb(challenge_id, is_participant),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_challenges_list")
async def back_to_challenges(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É —á–µ–ª–µ–Ω–¥–∂—ñ–≤, –≤–∏–¥–∞–ª—è—é—á–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    await list_challenges(callback.message)
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data.startswith("join_challenge:"))
async def join_challenge_handler(callback: CallbackQuery, bot: Bot):
    """–û–±—Ä–æ–±–ª—è—î –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–µ–ª–µ–Ω–¥–∂—É."""
    challenge_id = int(callback.data.split(":")[1])
    
    if await db.get_user_challenge_progress(callback.from_user.id, challenge_id):
        await callback.answer("–í–∏ –≤–∂–µ –ø—Ä–∏—î–¥–Ω–∞–Ω—ñ –¥–æ —Ü—å–æ–≥–æ —á–µ–ª–µ–Ω–¥–∂—É.", show_alert=True)
        return
        
    await db.join_public_challenge(callback.from_user.id, challenge_id)
    await achievements.check_and_grant_achievement(callback.from_user.id, 'challenger', bot)
    await callback.answer("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ —á–µ–ª–µ–Ω–¥–∂—É!", show_alert=True)
    await view_challenge(callback)  # –û–Ω–æ–≤–ª—é—î–º–æ –≤–∏–≥–ª—è–¥, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–º—ñ—Ç–∏—Ç–∏"

@router.callback_query(F.data.startswith("do_challenge:"))
async def do_challenge_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—É."""
    challenge_id = int(callback.data.split(":")[1])
    await state.update_data(challenge_id=challenge_id, proof_type='challenge')
    await callback.message.answer("–ß—É–¥–æ–≤–æ! –©–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤—ñ–¥–µ–æ.")
    await state.set_state(CommunityStates.waiting_for_video_proof)
    await callback.answer()

# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —á–µ–ª–µ–Ω–¥–∂—É ---

@router.message(Command("create_challenge"), F.chat.type == "private")
async def create_challenge_start(message: Message, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–µ–Ω–¥–∂—É."""
    await message.answer(
        "–ß—É–¥–æ–≤–æ! –î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ—Ç–∏.\n\n"
        "<b>–ö—Ä–æ–∫ 1:</b> –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —á–µ–ª–µ–Ω–¥–∂—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '30 –¥–Ω—ñ–≤ –±–µ–∑ —Å–æ–ª–æ–¥–∫–æ–≥–æ'):",
        parse_mode="HTML"  # <-- –î–û–î–ê–ù–û
    )
    await state.set_state(CommunityStates.creating_challenge_title)

@router.message(CommunityStates.creating_challenge_title, F.chat.type == "private")
async def process_challenge_title(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞–∑–≤—É —á–µ–ª–µ–Ω–¥–∂—É."""
    await state.update_data(title=message.text)
    await message.answer(
        "–ì–∞—Ä–Ω–∞ –Ω–∞–∑–≤–∞! \n\n<b>–ö—Ä–æ–∫ 2:</b> –¢–µ–ø–µ—Ä –æ–ø–∏—à—ñ—Ç—å —Å—É—Ç—å —á–µ–ª–µ–Ω–¥–∂—É (1-2 —Ä–µ—á–µ–Ω–Ω—è):",
        parse_mode="HTML"  # <-- –î–û–î–ê–ù–û
    )
    await state.set_state(CommunityStates.creating_challenge_desc)

@router.message(CommunityStates.creating_challenge_desc, F.chat.type == "private")
async def process_challenge_description(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –æ–ø–∏—Å —á–µ–ª–µ–Ω–¥–∂—É."""
    await state.update_data(description=message.text)
    await message.answer(
        "–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ. \n\n<b>–ö—Ä–æ–∫ 3:</b> –í–∫–∞–∂—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —á–µ–ª–µ–Ω–¥–∂—É –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 7 –∞–±–æ 30):",
        parse_mode="HTML"  # <-- –î–û–î–ê–ù–û
    )
    await state.set_state(CommunityStates.creating_challenge_duration)



@router.message(CommunityStates.creating_challenge_duration, F.chat.type == "private")
async def process_challenge_duration(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—É —ñ –ø–ª–∞–Ω—É—î –π–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è."""
    try:
        duration = int(message.text)
        if not (1 <= duration <= 100):  # –î–æ–∑–≤–æ–ª—è—î–º–æ –≤—ñ–¥ 1 –¥–Ω—è
            raise ValueError
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100.")
        return

    data = await state.get_data()
    
    challenge_id = await db.create_public_challenge(
        message.from_user.id, data['title'], data['description'], duration
    )
    
    run_date = datetime.now() + timedelta(days=duration)
    
    scheduler.add_job(
        db.delete_challenge, 
        trigger='date', 
        run_date=run_date, 
        args=[challenge_id],
        id=f"delete_challenge_{challenge_id}"  # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è
    )
    print(f"‚úÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —á–µ–ª–µ–Ω–¥–∂—É ID: {challenge_id} –Ω–∞ {run_date.strftime('%Y-%m-%d %H:%M:%S')}")
    
    await state.clear()
    
    await message.answer(
        f"‚úÖ –í–∞—à —á–µ–ª–µ–Ω–¥–∂ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –í—ñ–Ω –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∏–π {duration} –¥–Ω—ñ–≤, –∞ –ø–æ—Ç—ñ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç—å—Å—è."
    )

    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    group_message = (
        f"üî• <b>–ù–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ –≤—ñ–¥ {username}!</b> üî•\n\n"
        f"<b>–ù–∞–∑–≤–∞:</b> {data['title']}\n"
        f"<b>–û–ø–∏—Å:</b> {data['description']}\n"
        f"<b>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {duration} –¥–Ω—ñ–≤\n\n"
        f"<i>–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –≤–∏–∫–ª–∏–∫—É –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –∑ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /challenges!</i>"
    )
    if GROUP_ID:
        await send_message_safely(bot, int(GROUP_ID), group_message, parse_mode="HTML")

# --- –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏ ---

@router.message(Command("delete_challenge"), F.chat.type == "private")
async def delete_challenge_command(message: Message, scheduler: AsyncIOScheduler):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ–ª–µ–Ω–¥–∂—É."""
    if not await db.is_admin(message.from_user.id):
        await message.answer("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∫–∞–∂—ñ—Ç—å ID —á–µ–ª–µ–Ω–¥–∂—É: `/delete_challenge 123`")
        return
        
    challenge_id = int(args[1])
    await db.delete_challenge(challenge_id)
    
    # –°–ø—Ä–æ–±–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
    try:
        scheduler.remove_job(f"delete_challenge_{challenge_id}")
        await message.answer(f"–ß–µ–ª–µ–Ω–¥–∂ –∑ ID {challenge_id} –≤–∏–¥–∞–ª–µ–Ω–æ, –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    except Exception:
        await message.answer(f"–ß–µ–ª–µ–Ω–¥–∂ –∑ ID {challenge_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")


# --- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ ---
@router.message(Command("duel"), F.chat.type == "private")
async def create_duel_start(message: Message, state: FSMContext):
    args = message.text.split(maxsplit=2)
    if len(args) < 3 or not args[1].startswith('@'):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/duel @username <–æ–ø–∏—Å –≤–∏–∫–ª–∏–∫—É>`")
        return

    opponent_username = args[1][1:]
    description = args[2]

    opponent = await db.get_user_by_username(opponent_username)
    if not opponent:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{opponent_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω/–≤–æ–Ω–∞ —â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–≤(–ª–∞) –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –π–æ–≥–æ/—ó—ó –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É /start.")
        return
    
    opponent_id = opponent[0]
    if opponent_id == message.from_user.id:
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –¥—É–µ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±–µ :)")
        return

    duel_id = await db.create_duel(message.from_user.id, opponent_id, description)
    
    initiator_info = await message.bot.get_chat(message.from_user.id)
    initiator_name = f"@{initiator_info.username}" if initiator_info.username else initiator_info.full_name

    duel_invite_kb = kb.InlineKeyboardBuilder()
    duel_invite_kb.button(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"duel_accept:{duel_id}")
    duel_invite_kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"duel_reject:{duel_id}")

    await send_message_safely(
        message.bot, opponent_id,
        f"ü§∫ **–í–∞—Å –≤–∏–∫–ª–∏–∫–∞–ª–∏ –Ω–∞ –¥—É–µ–ª—å!**\n\n"
        f"{initiator_name} –∫–∏–¥–∞—î –≤–∞–º –≤–∏–∫–ª–∏–∫:\n*¬´{description}¬ª*\n\n–ü—Ä–∏–π–º–∞—î—Ç–µ?",
        reply_markup=duel_invite_kb.as_markup()
    )
    await message.answer(f"–í–∏–∫–ª–∏–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{opponent_username}. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –π–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")

@router.callback_query(F.data.startswith("duel_accept:"))
async def accept_duel(callback: CallbackQuery, bot: Bot):
    duel_id = int(callback.data.split(":")[1])
    duel = await db.get_duel_by_id(duel_id)
    if not duel or duel[4] != 'pending':
        await callback.message.edit_text("–¶–µ–π –≤–∏–∫–ª–∏–∫ –≤–∂–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∏–π.")
        return

    initiator_id, opponent_id, description = duel[1], duel[2], duel[3]
    if callback.from_user.id != opponent_id:
        await callback.answer("–¶–µ –Ω–µ –≤–∞—à –≤–∏–∫–ª–∏–∫.", show_alert=True)
        return

    await db.update_duel_status(duel_id, 'active')
    
    duel_message = f"‚úÖ –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –≤–∏–∫–ª–∏–∫! –î—É–µ–ª—å ¬´{description}¬ª —Ä–æ–∑–ø–æ—á–∞—Ç–æ."
    await callback.message.edit_text(duel_message, reply_markup=kb.get_duel_action_kb(duel_id))
    
    await send_message_safely(bot, initiator_id, f"‚úÖ –í–∞—à —Å—É–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏–π–Ω—è–≤ –≤–∏–∫–ª–∏–∫! –î—É–µ–ª—å ¬´{description}¬ª —Ä–æ–∑–ø–æ—á–∞—Ç–æ.", reply_markup=kb.get_duel_action_kb(duel_id))

    # --- –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –≥—Ä—É–ø—É –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –¥—É–µ–ª—ñ ---
    if GROUP_ID:
        try:
            initiator_info = await bot.get_chat(initiator_id)
            opponent_info = await bot.get_chat(opponent_id)

            initiator_name = f"@{initiator_info.username}" if initiator_info.username else initiator_info.full_name
            opponent_name = f"@{opponent_info.username}" if opponent_info.username else opponent_info.full_name
            
            group_message = (
                f"‚öîÔ∏è **–ù–æ–≤–∞ –¥—É–µ–ª—å —Ä–æ–∑–ø–æ—á–∞—Ç–æ!** ‚öîÔ∏è\n\n"
                f"{initiator_name} –∫–∏–Ω—É–≤(–ª–∞) –≤–∏–∫–ª–∏–∫ {opponent_name}!\n\n"
                f"**–£–º–æ–≤–∞:** *¬´{description}¬ª*\n\n"
                f"–°–ª—ñ–¥–∫—É—î–º–æ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! üçø"
            )
            await send_message_safely(bot, int(GROUP_ID), group_message)
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –¥—É–µ–ª—å –≤ –≥—Ä—É–ø—É: {e}")

    await callback.answer()


@router.callback_query(F.data.startswith("complete_duel:"))
async def complete_duel_handler(callback: CallbackQuery, state: FSMContext):
    duel_id = int(callback.data.split(":")[1])
    await state.update_data(duel_id=duel_id, proof_type='duel')
    await callback.message.answer("–ß—É–¥–æ–≤–æ! –©–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤—ñ–¥–µ–æ.")
    await state.set_state(CommunityStates.waiting_for_video_proof)
    await callback.answer()

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑ –≤—ñ–¥–µ–æ ---
@router.message(CommunityStates.waiting_for_video_proof, F.video, F.chat.type == "private")
async def process_video_confirmation(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    proof_type = data.get("proof_type")
    await state.clear()

    await message.answer("‚úÖ –í—ñ–¥–µ–æ –æ—Ç—Ä–∏–º–∞–Ω–æ! –í–∞—à –¥–æ–∫–∞–∑ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø—ñ.", reply_markup=kb.main_menu_kb)

    if GROUP_ID:
        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
        caption_text = "" # –°—Ç–≤–æ—Ä–∏–º–æ –∑–º—ñ–Ω–Ω—É –¥–ª—è –ø—ñ–¥–ø–∏—Å—É –¥–æ –≤—ñ–¥–µ–æ

        if proof_type == 'challenge':
            challenge_id = data.get("challenge_id")
            await db.update_challenge_progress(message.from_user.id, challenge_id)
            # –û—Ç—Ä–∏–º–∞—î–º–æ –Ω–∞–∑–≤—É —á–µ–ª–µ–Ω–¥–∂—É –¥–ª—è –±—ñ–ª—å—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            challenge_details = await db.get_public_challenge_details(challenge_id)
            challenge_title = challenge_details[2] if challenge_details else "–Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ —á–µ–ª–µ–Ω–¥–∂—É"
            caption_text = f"üèÜ **–ü—Ä–æ–≥—Ä–µ—Å —É —á–µ–ª–µ–Ω–¥–∂—ñ!**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –¥—ñ–ª–∏—Ç—å—Å—è —Å–≤–æ—ó–º —É—Å–ø—ñ—Ö–æ–º —É –≤–∏–∫–ª–∏–∫—É ¬´{challenge_title}¬ª!"

        elif proof_type == 'duel':
            duel_id = data.get("duel_id")
            await db.mark_duel_completed(message.from_user.id, duel_id)
            duel = await db.get_duel_by_id(duel_id)
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –¥—É–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±–æ–º–∞ —É—á–∞—Å–Ω–∏–∫–∞–º–∏
            if duel and duel.get('initiator_completed') and duel.get('opponent_completed'):
                await db.update_duel_status(duel_id, 'completed')
            caption_text = f"ü§∫ **–ü—Ä–æ–≥—Ä–µ—Å —É –¥—É–µ–ª—ñ!**\n\n–£—á–∞—Å–Ω–∏–∫ {username} –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è!"

        else:
            caption_text = f"üèÜ **–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è!**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –¥—ñ–ª–∏—Ç—å—Å—è —Å–≤–æ—ó–º –ø—Ä–æ–≥—Ä–µ—Å–æ–º!"

        # –ù–∞–¥—ñ–π–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–µ–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –≤ –≥—Ä—É–ø—É
        try:
            await bot.send_video(
                chat_id=int(GROUP_ID),
                video=message.video.file_id,
                caption=caption_text,
                parse_mode="HTML" # –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤ —Ç–µ–∫—Å—Ç—ñ
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –≤—ñ–¥–µ–æ –≤ –≥—Ä—É–ø—É: {e}")
            # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
@router.message(Command("delete_challenge"), F.chat.type == "private")
async def delete_challenge_command(message: Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ —á–µ–ª–µ–Ω–¥–∂—ñ.")
        return
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID —á–µ–ª–µ–Ω–¥–∂—É: /delete_challenge <id>")
        return
    challenge_id = int(args[1])
    await db.delete_challenge(challenge_id)
    await message.answer("–ß–µ–ª–µ–Ω–¥–∂ –≤–∏–¥–∞–ª–µ–Ω–æ.")

@router.callback_query(F.data == "tool_duel")
async def duel_start_dialog(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –∫–∏–Ω—É—Ç–∏ –≤–∏–∫–ª–∏–∫! ü§∫\n\n–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–æ–≥–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username):")
    await state.set_state(CommunityStates.creating_duel_opponent)
    await callback.answer()

async def create_duel_start_from_button(message: Message, state: FSMContext):
    await message.answer("–í–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –∫–∏–Ω—É—Ç–∏ –≤–∏–∫–ª–∏–∫! ü§∫\n\n–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤–∞—à–æ–≥–æ —Å—É–ø–µ—Ä–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username):")
    await state.set_state(CommunityStates.creating_duel_opponent)

@router.message(CommunityStates.creating_duel_opponent, F.chat.type == "private")
async def process_duel_opponent(message: Message, state: FSMContext):
    if not message.text or not message.text.startswith('@'):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —â–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @.")
        return
    
    opponent_username = message.text[1:]
    opponent = await db.get_user_by_username(opponent_username)
    if not opponent:
        await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{opponent_username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω/–≤–æ–Ω–∞ —â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–≤(–ª–∞) –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ—Å—ñ—Ç—å –π–æ–≥–æ/—ó—ó –Ω–∞–ø–∏—Å–∞—Ç–∏ –±–æ—Ç—É /start.")
        return
    
    opponent_id = opponent[0]
    if opponent_id == message.from_user.id:
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –¥—É–µ–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±–µ :)")
        return
        
    await state.update_data(opponent_id=opponent_id, opponent_username=opponent_username)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à—ñ—Ç—å —É–º–æ–≤—É –≤–∞—à–æ—ó –¥—É–µ–ª—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ü—Ä–∏—Å—ñ—Å—Ç–∏ 50 —Ä–∞–∑—ñ–≤ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É'):")
    await state.set_state(CommunityStates.creating_duel_desc)

@router.message(CommunityStates.creating_duel_desc, F.chat.type == "private")
async def process_duel_description_and_send(message: Message, state: FSMContext, bot: Bot):
    description = message.text
    data = await state.get_data()
    opponent_id = data.get('opponent_id')
    opponent_username = data.get('opponent_username')

    await state.clear()
    
    duel_id = await db.create_duel(message.from_user.id, opponent_id, description)
    
    initiator_info = await bot.get_chat(message.from_user.id)
    initiator_name = f"@{initiator_info.username}" if initiator_info.username else initiator_info.full_name

    duel_invite_kb = kb.InlineKeyboardBuilder()
    duel_invite_kb.button(text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"duel_accept:{duel_id}")
    duel_invite_kb.button(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"duel_reject:{duel_id}")

    await send_message_safely(
        bot, opponent_id,
        f"ü§∫ **–í–∞—Å –≤–∏–∫–ª–∏–∫–∞–ª–∏ –Ω–∞ –¥—É–µ–ª—å!**\n\n"
        f"{initiator_name} –∫–∏–¥–∞—î –≤–∞–º –≤–∏–∫–ª–∏–∫:\n*¬´{description}¬ª*\n\n–ü—Ä–∏–π–º–∞—î—Ç–µ?",
        reply_markup=duel_invite_kb.as_markup()
    )
    await message.answer(f"–í–∏–∫–ª–∏–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É @{opponent_username}. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –π–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.")


#111