from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, PhotoSize, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import keyboards as kb
import gemini
import database as db
from utils.safe_sender import answer_message_safely, send_message_safely
from .common import cmd_help
from config import GROUP_ID
import re
from html import escape
from aiogram.utils.markdown import hlink
from .community_handler import list_challenges, create_challenge_start, create_duel_start_from_button

router = Router()

class ToolsStates(StatesGroup):
    ai_chat_active = State()
    # –°—Ç–∞–Ω–∏ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    calc_waiting_for_gender = State()
    calc_waiting_for_params = State()
    calc_waiting_for_activity = State()
    calc_waiting_for_goal = State()
    # –°—Ç–∞–Ω–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    reminders_waiting_for_breakfast = State()
    reminders_waiting_for_lunch = State()
    reminders_waiting_for_dinner = State()

class ResultStates(StatesGroup):
    waiting_for_photo = State()

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ ---
@router.message(F.chat.type == "private", F.text == "‚öôÔ∏è –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏")
async def show_tools_menu(message: Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:", reply_markup=kb.tools_menu_kb)

# --- FAQ ---
@router.callback_query(F.data == "tool_faq")
async def show_faq(callback: CallbackQuery):
    faq_text = (
        "**‚ùì –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è (FAQ)**\n\n"
        "**1. –Ø–∫ —á–∞—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –º—ñ–π –ø–ª–∞–Ω?**\n"
        "–í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ—Ä–∏–≥—É—î—Ç—å—Å—è —â–æ—Ç–∏–∂–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ–≥–æ –≤—ñ–¥–≥—É–∫—É. –©–æ–Ω–µ–¥—ñ–ª—ñ –±–æ—Ç –∑–∞–ø–∏—Ç–∞—î –≤–∞—Å –ø—Ä–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å.\n\n"
        "**2. –©–æ —Ä–æ–±–∏—Ç–∏, —è–∫—â–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?**\n"
        "–ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∑–∞ –ø–ª–∞–Ω–æ–º –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è. –ì–æ–ª–æ–≤–Ω–µ - –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ.\n\n"
        "**3. –Ø–∫ –ø—Ä–∞—Ü—é—î —Å–∏—Å—Ç–µ–º–∞ –ø—ñ–¥–ø–∏—Å–∫–∏?**\n"
        "–ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 7 –¥–Ω—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±—É–¥–µ –º—ñ—Å—è—á–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞. –ö–µ—Ä—É–≤–∞—Ç–∏ –Ω–µ—é –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe.\n\n"
        "**4. –ß–∏ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–ª—å (—Å—Ö—É–¥–Ω–µ–Ω–Ω—è/–Ω–∞–±—ñ—Ä –º–∞—Å–∏)?**\n"
        "–¢–∞–∫! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start, —ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–Ω–æ–≤–æ –∑ –Ω–æ–≤–æ—é —Ü—ñ–ª–ª—é."
    )
    await answer_message_safely(callback.message, faq_text)
    await callback.answer()

# --- –ù–æ–≤–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–∞–Ω–¥–∏" ---
@router.callback_query(F.data == "tool_help")
async def show_help_from_tool(callback: CallbackQuery):
    await cmd_help(callback.message)
    await callback.answer()

# --- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä—ñ–π ---
@router.callback_query(F.data == "tool_calories")
async def start_calorie_calculator(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚öñÔ∏è **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä—ñ–π**\n\n–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑—Ä–∞—Ö—É—î–º–æ –≤–∞—à—É –¥–µ–Ω–Ω—É –Ω–æ—Ä–º—É. –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å (–ß–æ–ª–æ–≤—ñ–∫/–ñ—ñ–Ω–∫–∞):")
    await state.set_state(ToolsStates.calc_waiting_for_gender)
    await callback.answer()

@router.message(ToolsStates.calc_waiting_for_gender, F.chat.type == "private")
async def calc_process_gender(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–∫–≥), –∑—Ä—ñ—Å—Ç (—Å–º) —Ç–∞ –≤—ñ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 75, 180, 28")
    await state.set_state(ToolsStates.calc_waiting_for_params)

@router.message(ToolsStates.calc_waiting_for_params, F.chat.type == "private")
async def calc_process_params(message: Message, state: FSMContext):
    try:
        weight, height, age = map(str.strip, message.text.split(','))
        await state.update_data(weight=int(weight), height=int(height), age=int(age))
        await message.answer("–Ø–∫–∏–π —É –≤–∞—Å —Ä—ñ–≤–µ–Ω—å —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ? (—Å–∏–¥—è—á–∞ —Ä–æ–±–æ—Ç–∞, –ø–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –≤–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)")
        await state.set_state(ToolsStates.calc_waiting_for_activity)
    except (ValueError, IndexError):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: –≤–∞–≥–∞, –∑—Ä—ñ—Å—Ç, –≤—ñ–∫.")

@router.message(ToolsStates.calc_waiting_for_activity, F.chat.type == "private")
async def calc_process_activity(message: Message, state: FSMContext):
    await state.update_data(activity_level=message.text)
    await message.answer("–Ø–∫–∞ –≤–∞—à–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ü—ñ–ª—å? (–°—Ö—É–¥–Ω—É—Ç–∏, –ù–∞–±—Ä–∞—Ç–∏ –º'—è–∑–∏, –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ä–º—É)")
    await state.set_state(ToolsStates.calc_waiting_for_goal)

@router.message(ToolsStates.calc_waiting_for_goal, F.chat.type == "private")
async def calc_process_goal_and_calculate(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    user_data = await state.get_data()
    await message.answer("‚è≥ –†–æ–∑—Ä–∞—Ö–æ–≤—É—é...")
    
    result = await gemini.calculate_calories(user_data)
    await answer_message_safely(message, result)
    await state.clear()
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=kb.main_menu_kb)


@router.callback_query(F.data == "tool_reminders")
async def start_reminders_setup(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚è∞ **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å**\n\n–í–∫–∞–∂—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π —á–∞—Å –¥–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):")
    await state.set_state(ToolsStates.reminders_waiting_for_breakfast)
    await callback.answer()

async def process_time_input(message: Message, state: FSMContext, next_state: State, prompt: str, field_name: str):
    time_pattern = re.compile(r"^\d{2}:\d{2}$")
    if not time_pattern.match(message.text):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 09:00).")
        return
    await state.update_data({field_name: message.text})
    if next_state:
        await message.answer(prompt)
        await state.set_state(next_state)
    else: # This is the last step
        data = await state.get_data()
        await db.set_meal_reminders(
            user_id=message.from_user.id,
            breakfast=data['breakfast_time'],
            lunch=data['lunch_time'],
            dinner=data['dinner_time']
        )
        await message.answer(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–°–Ω—ñ–¥–∞–Ω–æ–∫: {data['breakfast_time']}\n–û–±—ñ–¥: {data['lunch_time']}\n–í–µ—á–µ—Ä—è: {data['dinner_time']}", reply_markup=kb.main_menu_kb)
        await state.clear()


@router.message(ToolsStates.reminders_waiting_for_breakfast, F.chat.type == "private")
async def process_breakfast_time(message: Message, state: FSMContext):
    await process_time_input(message, state, ToolsStates.reminders_waiting_for_lunch, "–î–æ–±—Ä–µ. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å —á–∞—Å –¥–ª—è –æ–±—ñ–¥—É:", "breakfast_time")

@router.message(ToolsStates.reminders_waiting_for_lunch, F.chat.type == "private")
async def process_lunch_time(message: Message, state: FSMContext):
    await process_time_input(message, state, ToolsStates.reminders_waiting_for_dinner, "–Ü –æ—Å—Ç–∞–Ω–Ω—î, —á–∞—Å –¥–ª—è –≤–µ—á–µ—Ä—ñ:", "lunch_time")

@router.message(ToolsStates.reminders_waiting_for_dinner, F.chat.type == "private")
async def process_dinner_time(message: Message, state: FSMContext):
    await process_time_input(message, state, None, "", "dinner_time")


# --- –ß–∞—Ç –∑ AI-—Ç—Ä–µ–Ω–µ—Ä–æ–º ---
@router.message(F.chat.type == "private", F.text == "üí¨ –ß–∞—Ç –∑ AI-—Ç—Ä–µ–Ω–µ—Ä–æ–º")
async def start_ai_chat(message: Message, state: FSMContext):
    await state.set_state(ToolsStates.ai_chat_active)
    await state.update_data(history=[])
    await message.answer(
        "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Ç—É –∑ AI-—Ç—Ä–µ–Ω–µ—Ä–æ–º. üí¨\n\n"
        "–°—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Ñ—ñ—Ç–Ω–µ—Å, —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∞–±–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è. –©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /stop_chat.",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(Command("stop_chat"), F.chat.type == "private")
async def stop_ai_chat(message: Message, state: FSMContext):
    if await state.get_state() is None:
        return
    await state.clear()
    await message.answer("–†–µ–∂–∏–º —á–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=kb.main_menu_kb)

@router.message(ToolsStates.ai_chat_active, F.chat.type == "private")
async def handle_ai_chat(message: Message, state: FSMContext, bot: Bot):
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    data = await state.get_data()
    history = data.get('history', [])
    
    response_text = await gemini.get_ai_chat_response(history, message.text)
    
    history.append({"author": "user", "text": message.text})
    history.append({"author": "model", "text": response_text})
    await state.update_data(history=history[-4:]) # Keep last 4 turns
    
    await answer_message_safely(message, response_text)

# --- –û–±—Ä–æ–±–∫–∞ "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º" ---
@router.callback_query(F.data == "share_result")
async def handle_share_result(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ß—É–¥–æ–≤–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –≤–∞—à–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É, —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è.")
    await state.set_state(ResultStates.waiting_for_photo)
    await callback.answer()

# --- NEW AND IMPROVED PHOTO HANDLER ---
@router.message(ResultStates.waiting_for_photo, F.photo)
async def process_result_photo(message: Message, state: FSMContext, bot: Bot):
    photo: PhotoSize = message.photo[-1]
    photo_file_id = photo.file_id

    # 1. Save to DB first
    await db.add_user_result(message.from_user.id, photo_file_id)
    await state.clear()
    await message.answer("‚úÖ –î—è–∫—É—é, –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ù–∞–º–∞–≥–∞—é—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ –≥—Ä—É–ø—ñ...")

    # 2. Try to publish to the group
    if GROUP_ID:
        try:
            # Prepare caption with a safe HTML link
            user_name = escape(message.from_user.full_name)
            user_link_html = hlink(user_name, f"tg://user?id={message.from_user.id}")
            caption_text = f"üí™ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_link_html} –ø–æ–¥—ñ–ª–∏–≤—Å—è —Å–≤–æ—ó–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!"

            # Send photo with caption in one message
            await bot.send_photo(
                chat_id=int(GROUP_ID),
                photo=photo_file_id,
                caption=caption_text,
                parse_mode="HTML"
            )
            
            # 3. Confirm successful publication to the user ONLY after it succeeds
            await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø—ñ!")

        except Exception as e:
            # 3. Inform user about the failure and log the detailed error
            await message.answer("‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É.")
            print(f"–ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø—É {GROUP_ID}. –ü—Ä–∏—á–∏–Ω–∞: {e}")
    else:
        # Handle case where GROUP_ID is not configured
        print("INFO: –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –≥—Ä—É–ø—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ (GROUP_ID –Ω–µ –≤–∫–∞–∑–∞–Ω–æ).")

# --- –û–±—Ä–æ–±–∫–∞ "–ú–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏" ---
@router.callback_query(F.data == "my_results")
async def handle_my_results(callback: CallbackQuery, bot: Bot):
    results = await db.get_user_results(callback.from_user.id)
    if not results:
        await callback.answer("–í–∏ —â–µ –Ω–µ –¥—ñ–ª–∏–ª–∏—Å—è –∂–æ–¥–Ω–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.", show_alert=True)
        return

    await callback.message.answer("–û—Å—å –≤–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    
    # Send photos in chunks of 10 (Telegram API limit)
    media_group = [InputMediaPhoto(media=file_id) for file_id, in results]
    for i in range(0, len(media_group), 10):
        chunk = media_group[i:i + 10]
        if chunk:
            await bot.send_media_group(chat_id=callback.from_user.id, media=chunk)
    
    await callback.answer()

@router.callback_query(F.data == "tool_challenges")
async def handle_challenges_button(callback: CallbackQuery):
    await list_challenges(callback.message)
    await callback.answer()

@router.callback_query(F.data == "tool_create_challenge")
async def handle_create_challenge_button(callback: CallbackQuery, state: FSMContext):
    await create_challenge_start(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "tool_duel")
async def handle_duel_button(callback: CallbackQuery, state: FSMContext):
    await create_duel_start_from_button(callback.message, state)
    await callback.answer()