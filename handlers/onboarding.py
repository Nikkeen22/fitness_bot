from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart
import keyboards as kb
import gemini
import database as db
import achievements
from utils.safe_sender import answer_message_safely
from config import GROUP_INVITE_LINK
import locale
from datetime import datetime

router = Router()

try:
    locale.setlocale(locale.LC_TIME, 'uk_UA.UTF-8')
except locale.Error:
    print("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—å –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –¥–Ω—ñ —Ç–∏–∂–Ω—è –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é.")

class OnboardingStates(StatesGroup):
    waiting_for_goal = State()
    waiting_for_gender = State()
    waiting_for_params = State()
    waiting_for_body_type = State()
    waiting_for_activity = State()
    waiting_for_conditions = State()
    waiting_for_frequency = State()
    waiting_for_duration = State()
    waiting_for_food_prefs = State()

# --- –ö–æ–º–∞–Ω–¥–∏ /start —Ç–∞ /newplan –ø–µ—Ä–µ—ó—Ö–∞–ª–∏ —Å—é–¥–∏ ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = message.from_user
    is_new_user = await db.add_user(user.id, user.username, user.full_name)
    if is_new_user:
        await message.answer("–í—ñ—Ç–∞—î–º–æ –≤ AI Fitness Coach! üéâ\n\n–í–∞–º –Ω–∞–¥–∞–Ω–æ **–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π 7-–¥–µ–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø** –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π. –î–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
    await start_onboarding(message, state)

@router.message(Command("newplan"))
async def cmd_newplan(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –Ω–æ–≤–∏–π –ø–ª–∞–Ω! –ü—Ä–æ—Ü–µ—Å —Ç–∞–∫–∏–π —Å–∞–º–∏–π, —è–∫ —ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É.")
    await start_onboarding(message, state)


async def start_onboarding(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π AI Fitness Coach. –î–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º—É.\n\n"
        "–î–ª—è –ø–æ—á–∞—Ç–∫—É, —è–∫–∞ –≤–∞—à–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ü—ñ–ª—å?",
        reply_markup=kb.goal_kb
    )
    await state.set_state(OnboardingStates.waiting_for_goal)
    
# ... (—Ä–µ—à—Ç–∞ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –±–µ–∑ –∑–º—ñ–Ω)
@router.message(OnboardingStates.waiting_for_goal)
async def process_goal(message: Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å (–ß–æ–ª–æ–≤—ñ–∫/–ñ—ñ–Ω–∫–∞).", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OnboardingStates.waiting_for_gender)
@router.message(OnboardingStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    await state.update_data(gender=message.text)
    await message.answer("–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É (–∫–≥), –∑—Ä—ñ—Å—Ç (—Å–º) —Ç–∞ –≤—ñ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 75, 180, 28")
    await state.set_state(OnboardingStates.waiting_for_params)
@router.message(OnboardingStates.waiting_for_params)
async def process_params(message: Message, state: FSMContext):
    try:
        weight, height, age = map(str.strip, message.text.split(','))
        await state.update_data(weight=int(weight), height=int(height), age=int(age))
        await message.answer("–î—è–∫—É—é. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à—ñ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç—É—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ö—É–¥–æ—Ä–ª—è–≤–∏–π, —î –Ω–µ–≤–µ–ª–∏–∫–∏–π –∂–∏–≤—ñ—Ç, —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞).")
        await state.set_state(OnboardingStates.waiting_for_body_type)
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.")
@router.message(OnboardingStates.waiting_for_body_type)
async def process_body_type(message: Message, state: FSMContext):
    await state.update_data(body_type=message.text)
    await message.answer("–Ø–∫–∏–π —É –≤–∞—Å —Ä—ñ–≤–µ–Ω—å —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ? (—Å–∏–¥—è—á–∞ —Ä–æ–±–æ—Ç–∞, –ø–æ–º—ñ—Ä–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, –≤–∏—Å–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)")
    await state.set_state(OnboardingStates.waiting_for_activity)
@router.message(OnboardingStates.waiting_for_activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity_level=message.text)
    await message.answer("–î–µ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å?", reply_markup=kb.conditions_kb)
    await state.set_state(OnboardingStates.waiting_for_conditions)
@router.message(OnboardingStates.waiting_for_conditions)
async def process_conditions(message: Message, state: FSMContext):
    await state.update_data(conditions=message.text)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤–∏ –≥–æ—Ç–æ–≤—ñ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è (2-6)?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(OnboardingStates.waiting_for_frequency)
@router.message(OnboardingStates.waiting_for_frequency)
async def process_frequency(message: Message, state: FSMContext):
    await state.update_data(frequency=message.text)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω –≤–∏ –≥–æ—Ç–æ–≤—ñ –ø—Ä–∏–¥—ñ–ª—è—Ç–∏ –æ–¥–Ω–æ–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—é (30-90)?")
    await state.set_state(OnboardingStates.waiting_for_duration)
@router.message(OnboardingStates.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    await state.update_data(duration=message.text)
    await message.answer("–û—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫: —á–∏ —î —É –≤–∞—Å –æ—Å–æ–±–ª–∏–≤—ñ —Ö–∞—Ä—á–æ–≤—ñ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å, –∞–ª–µ—Ä–≥—ñ—è –Ω–∞ –≥–æ—Ä—ñ—Ö–∏). –Ø–∫—â–æ –Ω—ñ, –Ω–∞–ø–∏—à—ñ—Ç—å '–Ω–µ–º–∞—î'.")
    await state.set_state(OnboardingStates.waiting_for_food_prefs)

@router.message(OnboardingStates.waiting_for_food_prefs)
async def process_food_prefs_and_generate(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(food_prefs=message.text)
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    await db.save_onboarding_data(user_id, user_data)
    
    await bot.send_chat_action(chat_id=user_id, action="typing")
    await message.answer("–°—É–ø–µ—Ä! –í—Å—ñ –¥–∞–Ω—ñ –∑—ñ–±—Ä–∞–Ω–æ. –ì–æ—Ç—É—é –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É...", reply_markup=ReplyKeyboardRemove())
    
    today_weekday = datetime.now().strftime('%A').capitalize()
    full_plan, today_workout = await gemini.generate_plan(user_data, today_weekday)
    
    await db.save_fitness_plan(user_id, full_plan)
    
    await answer_message_safely(message, full_plan)
    
    if "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞" not in full_plan and "–í–∏–±–∞—á—Ç–µ, –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è" not in full_plan:
        await message.answer("–í–∞—à –ø–ª–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –π–æ–≥–æ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.", reply_markup=kb.main_menu_kb)
        await achievements.check_and_grant_achievement(user_id, 'novice', bot)

        await answer_message_safely(message, f"**–û—Å—å –≤–∞—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today_weekday}):**\n\n{today_workout}", reply_markup=kb.confirm_workout_kb)

        if GROUP_INVITE_LINK:
            group_invite_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏", url=GROUP_INVITE_LINK)]])
            await message.answer("ÔøΩ –ê —Ç–µ–ø–µ—Ä –¥–æ–ª—É—á–∞–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏, —â–æ–± –¥—ñ–ª–∏—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–∞ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —á–µ–ª–µ–Ω–¥–∂–∞—Ö!", reply_markup=group_invite_kb)

    await state.clear()

