from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import database as db
import achievements
import keyboards as kb
from config import ADMIN_ID, PAYMENT_CARD_NUMBER
from utils.safe_sender import answer_message_safely, send_message_safely
import random
from datetime import datetime

router = Router()

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
        "/start - –†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ\n"
        "/myplan - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω\n"
        "/progress - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å\n"
        "/achievements - –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
        "**–°–ø—ñ–ª—å–Ω–æ—Ç–∞ —Ç–∞ –ß–µ–ª–µ–Ω–¥–∂—ñ (—Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö):**\n"
        "/challenges - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≤–∏–∫–ª–∏–∫—ñ–≤\n"
        "/create_challenge - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–∏–π –≤–∏–∫–ª–∏–∫\n"
        "/duel @username <–æ–ø–∏—Å> - –ö–∏–Ω—É—Ç–∏ –≤–∏–∫–ª–∏–∫ —ñ–Ω—à–æ–º—É —É—á–∞—Å–Ω–∏–∫—É\n\n"
        "**–î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏:**\n"
        "/food - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç –∑ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤\n"
        "/tip - –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—É –ø–æ—Ä–∞–¥—É\n\n"
        "**–ü—ñ–¥–ø–∏—Å–∫–∞:**\n"
        "/subscribe - –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–æ—é\n\n"
        "**–Ü–Ω—à–µ:**\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—ñ—é"
    )
    if str(message.from_user.id) == ADMIN_ID:
        help_text += "\n\n**–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:**\n/grant <user_id> - –ù–∞–¥–∞—Ç–∏ –¥–æ–≤—ñ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø"
    await answer_message_safely(message, help_text)

# ... (—Ä–µ—à—Ç–∞ —Ñ–∞–π–ª—É –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –±–µ–∑ /start —Ç–∞ /newplan)
@router.message(F.text.casefold() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏", Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
        return
    await state.clear()
    await message.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
@router.message(Command("myplan"))
async def cmd_myplan(message: Message):
    plan = await db.get_user_plan(message.from_user.id)
    if plan:
        await message.answer("–û—Å—å –≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–∞–Ω:")
        await answer_message_safely(message, plan)
    else:
        await message.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –ø–ª–∞–Ω—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
@router.message(Command("achievements"))
async def cmd_achievements(message: Message):
    user_achievements = await db.get_user_achievements(message.from_user.id)
    if not user_achievements:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å. –ß–∞—Å –ø–æ—á–∏–Ω–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! üí™")
        return
    response_text = "üèÜ **–í–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:**\n\n"
    for ach_tuple in user_achievements:
        ach_id = ach_tuple[0]
        achievement = achievements.ACHIEVEMENTS.get(ach_id)
        if achievement:
            response_text += f"**{achievement['name']}**: _{achievement['description']}_\n"
    await answer_message_safely(message, response_text)
@router.callback_query(F.data == "workout_done")
async def process_workout_done(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    await db.log_workout_completion(user_id)
    await achievements.check_workout_achievements(user_id, bot)
    await callback.message.edit_text("‚úÖ –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")
    await callback.answer()
@router.message(Command("subscribe"))
async def cmd_subscribe(message: Message):
    status, expiry_date = await db.get_user_subscription_status(message.from_user.id)
    if str(message.from_user.id) == ADMIN_ID:
        text = "üëë –í–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞–º –Ω–∞–¥–∞–Ω–æ –¥–æ–≤—ñ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø."
    elif status == 'active':
        text = f"‚úÖ –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expiry_date.strftime('%d.%m.%Y')}"
    elif status == 'trial':
        text = f"‚è≥ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –¥–æ {expiry_date.strftime('%d.%m.%Y')}"
    else:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏."
    await message.answer(text, reply_markup=kb.subscribe_kb)
@router.callback_query(F.data == "initiate_payment")
async def initiate_payment(callback: CallbackQuery):
    user_id = callback.from_user.id
    payment_code = f"{random.randint(100, 999)}-{random.randint(100, 999)}"
    await db.add_pending_payment(user_id, payment_code)
    payment_details = (
        f"–î–ª—è –æ–ø–ª–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ (49 –≥—Ä–Ω/–º—ñ—Å) –ø–µ—Ä–µ–∫–∞–∂—ñ—Ç—å –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n\n"
        f"`{PAYMENT_CARD_NUMBER}`\n\n"
        f"**–û–ë–û–í'–Ø–ó–ö–û–í–û** –≤–∫–∞–∂—ñ—Ç—å –≤ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ/–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –ø–ª–∞—Ç–µ–∂—É —Ü–µ–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥:\n\n"
        f"`{payment_code}`\n\n"
        f"–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
    )
    await answer_message_safely(callback.message, payment_details, reply_markup=kb.confirm_user_payment_kb)
    await callback.answer()
@router.callback_query(F.data == "user_confirm_payment")
async def user_confirm_payment(callback: CallbackQuery, bot: Bot):
    user = callback.from_user
    payment_code = await db.get_pending_payment_code(user.id)
    if not payment_code:
        await callback.message.edit_text("–í–∏ –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
        await callback.answer()
        return
    admin_notification = (
        f"üîî **–ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏!**\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user.full_name}\n"
        f"Username: @{user.username}\n"
        f"ID: `{user.id}`\n"
        f"**–ö–û–î –ü–õ–ê–¢–ï–ñ–£: `{payment_code}`**\n\n"
        f"–°—Ç–≤–µ—Ä–¥–∂—É—î, —â–æ –æ–ø–ª–∞—Ç–∏–≤ –ø—ñ–¥–ø–∏—Å–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∞–±–æ –≤—ñ–¥—Ö–∏–ª—ñ—Ç—å –ø–ª–∞—Ç—ñ–∂."
    )
    try:
        await send_message_safely(bot, int(ADMIN_ID), admin_notification, reply_markup=kb.get_admin_payment_kb(user.id))
        await callback.message.edit_text("–î—è–∫—É—î–º–æ! –í–∞—à –∑–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")
        await callback.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–ø–∏—Ç—É.")
    await callback.answer()
@router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm_payment(callback: CallbackQuery, bot: Bot):
    target_user_id = int(callback.data.split(":")[1])
    await db.update_user_subscription(target_user_id, months=1)
    await db.delete_pending_payment(target_user_id)
    receipt_text = (f"üßæ **–ö–≤–∏—Ç–∞–Ω—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É**\n\n**–ü–æ—Å–ª—É–≥–∞:** –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ AI Fitness Coach (1 –º—ñ—Å—è—Ü—å)\n**–°—É–º–∞:** 49.00 –≥—Ä–Ω\n**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n–î—è–∫—É—î–º–æ, —â–æ –≤–∏ –∑ –Ω–∞–º–∏!")
    try:
        await send_message_safely(bot, target_user_id, "‚úÖ –í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ü—ñ–¥–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ 1 –º—ñ—Å—è—Ü—å.")
        await send_message_safely(bot, target_user_id, receipt_text)
        await callback.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
    except Exception as e:
        await callback.message.edit_text(f"–ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}. –ü–æ–º–∏–ª–∫–∞: {e}")
    await callback.answer()
@router.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject_payment(callback: CallbackQuery, bot: Bot):
    target_user_id = int(callback.data.split(":")[1])
    await db.delete_pending_payment(target_user_id)
    try:
        await send_message_safely(bot, target_user_id, "‚ùå –ù–∞ –∂–∞–ª—å, –≤–∞—à –ø–ª–∞—Ç—ñ–∂ –Ω–µ –±—É–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.message.edit_text(f"‚ùå –ó–∞–ø–∏—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    except Exception as e:
        await callback.message.edit_text(f"–ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}. –ü–æ–º–∏–ª–∫–∞: {e}")
    await callback.answer()
@router.message(Command("grant"))
async def cmd_grant(message: Message, bot: Bot):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /grant <user_id>")
        return
    try:
        target_user_id = int(args[1])
        await db.grant_lifetime_access(target_user_id)
        await message.answer(f"‚úÖ –î–æ–≤—ñ—á–Ω–∏–π –¥–æ—Å—Ç—É–ø —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ ID {target_user_id}.")
        await send_message_safely(bot, target_user_id, "üéâ –í—ñ—Ç–∞—î–º–æ! –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–¥–∞–≤ –≤–∞–º –¥–æ–≤—ñ—á–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø.")
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

